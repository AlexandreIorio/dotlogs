{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DotLogs","text":"<p>Lightweight, configurable logging for .NET with Serilog under the hood, plus an optional ASP.NET Core controller to manage logging at runtime.</p> <p>What you\u2019ll find here:</p> <ul> <li>Getting started with the core library</li> <li>Configuration via the <code>logs/logs.config</code> file with hot reload</li> <li>ASP.NET Core controller endpoints for runtime control</li> </ul> <p>Quick links:</p> <ul> <li>DotLogs (core): Getting started \u2192 getting-started.md</li> <li>DotLogs (core): Configuration \u2192 configuration.md</li> <li>ASP.NET integration: Controller \u2192 aspnet.md         index.md  # The documentation homepage.</li> </ul> <p>This documentation is generated by GPT-5 with Github Copilot.</p>"},{"location":"aspnet/","title":"ASP.NET integration","text":"<p><code>DotLogs.AspNet</code> provides a controller to manage logging at runtime via HTTP.</p>"},{"location":"aspnet/#install","title":"Install","text":"<pre><code># Core library\ndotnet add package DotLogs\n\n# ASP.NET controller\ndotnet add package DotLogs.AspNet\n</code></pre>"},{"location":"aspnet/#setup","title":"Setup","text":"<pre><code>using DotLogs;\n\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddSingleton&lt;DotLogsService&gt;();\nbuilder.Services.AddControllers();\n\nvar app = builder.Build();\n\napp.MapControllers();\napp.Run();\n</code></pre>"},{"location":"aspnet/#endpoints-base-route-apidotlogs","title":"Endpoints (base route <code>api/DotLogs</code>)","text":"<ul> <li><code>POST /api/DotLogs/enable</code> \u2014 enable console and file logging</li> <li><code>POST /api/DotLogs/disable</code> \u2014 disable console and file logging</li> <li><code>POST /api/DotLogs/enable-console</code> \u2014 enable console logging</li> <li><code>POST /api/DotLogs/disable-console</code> \u2014 disable console logging</li> <li><code>POST /api/DotLogs/enable-file</code> \u2014 enable file logging</li> <li><code>POST /api/DotLogs/disable-file</code> \u2014 disable file logging</li> <li><code>POST /api/DotLogs/level?level=Debug</code> \u2014 set minimum level</li> <li><code>GET  /api/DotLogs/status</code> \u2014 get current configuration</li> </ul>"},{"location":"aspnet/#examples","title":"Examples","text":"<pre><code>curl -X POST \"http://localhost:5000/api/DotLogs/level?level=Trace\"\ncurl -X POST \"http://localhost:5000/api/DotLogs/disable-console\"\ncurl -X GET  \"http://localhost:5000/api/DotLogs/status\"\n</code></pre>"},{"location":"aspnet/#security","title":"Security","text":"<p>These endpoints control diagnostics and should be protected in production.</p> <ul> <li>Restrict to admins (authorization policy)</li> <li>Place behind internal network/VPN</li> <li>Require an API key or token</li> </ul>"},{"location":"configuration/","title":"Configuration","text":"<p><code>DotLogsService</code> persists and watches settings in <code>logs/logs.config</code> (JSON). A default file is created on first run.</p>"},{"location":"configuration/#fields","title":"Fields","text":"<ul> <li><code>LogToConsole</code> (bool, default true)</li> <li><code>LogToFile</code> (bool, default true)</li> <li><code>LogLevel</code> (string: Verbose/Trace, Debug, Information, Warning, Error, Fatal)</li> <li><code>Period</code> (int retained files for rolling, default 30)</li> <li><code>RollingInterval</code> (enum numeric, default Day)</li> <li><code>LogFileName</code> (string, default <code>log.txt</code>)</li> <li><code>LogFormat</code> (Serilog output template)</li> </ul>"},{"location":"configuration/#example","title":"Example","text":"<pre><code>{\n  \"LogToConsole\": true,\n  \"LogToFile\": true,\n  \"LogLevel\": \"Information\",\n  \"Period\": 30,\n  \"RollingInterval\": 3,\n  \"LogFileName\": \"log.txt\",\n  \"LogFormat\": \"[{Timestamp:yyyy-MM-dd HH:mm:ss}] [{Level:u3}] [{Caller}] [{file}:{line}] {Message:lj}\\\\n\"\n}\n</code></pre>"},{"location":"configuration/#notes","title":"Notes","text":"<ul> <li>Changes to <code>logs.config</code> are hot-reloaded without restarting the app.</li> <li><code>RollingInterval</code> is serialized as a numeric enum (Serilog RollingInterval). The default value corresponds to Day.</li> <li>You can also update configuration programmatically via <code>SetConfiguration</code> and <code>SetLevel</code>.</li> </ul>"},{"location":"getting-started/","title":"Getting started","text":""},{"location":"getting-started/#install","title":"Install","text":"<pre><code>dotnet add package DotLogs\n</code></pre>"},{"location":"getting-started/#quick-start","title":"Quick start","text":"<pre><code>using DotLogs;\n\n// Ensure disposal to flush logs on shutdown\nusing var logs = new DotLogsService();\n\nlogs.LogInformation(\"App started\");\nlogs.LogWarning(\"Something to look at\");\nlogs.LogError(\"Something went wrong\");\n\n// Change level at runtime\nlogs.SetLevel(\"Debug\");\nlogs.LogDebug(\"Now you will see debug logs\");\n\n// Subscribe to config reload events (triggered when logs/logs.config changes)\nlogs.ConfigurationUpdated += () =&gt; Console.WriteLine(\"Log configuration reloaded.\");\n</code></pre> <p>First run creates a <code>logs/</code> folder with a <code>logs.config</code> file. Edit it to modify behavior; changes are picked up automatically.</p>"},{"location":"getting-started/#build-and-test","title":"Build and test","text":"<pre><code># Build and run tests for the solution\ndotnet build src/DotLogs.sln --nologo\ndotnet test  src/DotLogs.sln --nologo\n</code></pre>"}]}